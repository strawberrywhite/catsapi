{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","option","url","method","headers","urls","fetchMoreData","axios","then","res","data","map","arr","preData","setState","concat","this","console","log","dataLength","length","next","hasMore","loader","Container","Row","i","index","Col","xs","md","lg","key","Image","src","fluid","rounded","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oVA+DeA,E,2MAxDbC,MAAQ,CACNC,OAAQ,CACNC,IAAK,qEACLC,OAAQ,MACRC,QAAS,CACP,YAAa,yCAGjBC,KAAM,I,EAcRC,cAAgB,WACdC,IAAM,EAAKP,MAAMC,QAAQO,MAAK,SAAAC,GAC5B,IAAMJ,EAAOI,EAAIC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIV,OAC/BW,EAAU,EAAKb,MAAMK,KAE3B,EAAKS,SAAL,eACK,EAAKd,MADV,CAEEK,KAAMQ,EAAQE,OAAOV,U,mFAlBN,IAAD,OAClBE,IAAMS,KAAKhB,MAAMC,QAAQO,MAAK,SAAAC,GAC5BQ,QAAQC,IAAIT,EAAIC,MAChB,IAAML,EAAOI,EAAIC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIV,OACrC,EAAKY,SAAL,eACK,EAAKd,MADV,CAEEK,KAAMA,U,+BAkBV,OACE,kBAAC,IAAD,CACEc,WAAYH,KAAKhB,MAAMK,KAAKe,OAC5BC,KAAML,KAAKV,cACXgB,SAAS,EACTC,OAAQ,2CAER,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGT,KAAKhB,MAAMK,KAAKM,KAAI,SAACe,EAAGC,GAAJ,OACnB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKL,GAC9B,kBAACM,EAAA,EAAD,CAAOC,IAAKR,EAAGS,OAAK,EAACC,SAAO,e,GA/C1BC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.964a4275.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { Container, Row, Col, Image } from \"react-bootstrap\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nclass App extends Component {\n  state = {\n    option: {\n      url: \"https://api.thecatapi.com/v1/images/search?limit=10&mime_types=gif\",\n      method: \"GET\",\n      headers: {\n        \"x-api-key\": \"11c277f8-7891-4269-aee3-6798cb6b61bd\"\n      }\n    },\n    urls: []\n  };\n\n  componentDidMount() {\n    axios(this.state.option).then(res => {\n      console.log(res.data);\n      const urls = res.data.map(arr => arr.url);\n      this.setState({\n        ...this.state,\n        urls: urls\n      });\n    });\n  }\n\n  fetchMoreData = () => {\n    axios(this.state.option).then(res => {\n      const urls = res.data.map(arr => arr.url);\n      const preData = this.state.urls;\n\n      this.setState({\n        ...this.state,\n        urls: preData.concat(urls)\n      });\n    });\n  };\n\n  render() {\n    return (\n      <InfiniteScroll\n        dataLength={this.state.urls.length}\n        next={this.fetchMoreData}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n      >\n        <Container>\n          <Row>\n            {this.state.urls.map((i, index) => (\n              <Col xs={12} md={6} lg={6} key={index}>\n                <Image src={i} fluid rounded ></Image>\n              </Col>\n            ))}\n          </Row>\n        </Container>\n      </InfiniteScroll>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}