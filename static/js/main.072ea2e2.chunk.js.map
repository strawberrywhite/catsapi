{"version":3,"sources":["Gif/gif.js","Img/img.js","App.js","serviceWorker.js","index.js"],"names":["Gif","state","option","url","method","headers","ObjUrls","fetchMoreData","axios","then","res","urlsObj","data","map","arr","id","preKeysObj","newKeysObj","setState","this","colStyle","textAlign","dataLength","Object","values","length","next","hasMore","loader","Container","Row","i","index","Col","xs","md","lg","key","style","Image","src","fluid","roundedCircle","thumbnail","Component","Img","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.072ea2e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Row, Col, Image} from \"react-bootstrap\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nclass Gif extends Component {\r\n  state = {\r\n    option: {\r\n      url: \"https://api.thecatapi.com/v1/images/search?limit=20&mime_types=gif\",\r\n      method: \"GET\",\r\n      headers: {\r\n        \"x-api-key\": \"11c277f8-7891-4269-aee3-6798cb6b61bd\"\r\n      }\r\n    },\r\n    ObjUrls: {}\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios(this.state.option).then(res => {\r\n      // console.log(res);\r\n      let urlsObj = {};\r\n      res.data.map(arr => (urlsObj[arr.id] = arr.url));\r\n      //將資料存成物件,方便查詢以及過濾重複資料\r\n      const preKeysObj = this.state.ObjUrls;\r\n      const newKeysObj = { ...preKeysObj, ...urlsObj };\r\n      this.setState({\r\n        ...this.state,\r\n        ObjUrls: newKeysObj\r\n      });\r\n    });\r\n  }\r\n\r\n  fetchMoreData = () => {\r\n    axios(this.state.option).then(res => {\r\n      // console.log(res);\r\n      let urlsObj = {};\r\n      res.data.map(arr => (urlsObj[arr.id] = arr.url));\r\n      const preKeysObj = this.state.ObjUrls;\r\n      const newKeysObj = { ...preKeysObj, ...urlsObj };\r\n      this.setState({\r\n        ...this.state,\r\n        ObjUrls: newKeysObj\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const colStyle = { textAlign: \"center\" };\r\n    return (\r\n      \r\n        <InfiniteScroll\r\n          dataLength={Object.values(this.state.ObjUrls).length}\r\n          next={this.fetchMoreData}\r\n          hasMore={true}\r\n          loader={<h4>Loading...</h4>}\r\n        >\r\n          <Container>\r\n            <Row>\r\n              {Object.values(this.state.ObjUrls).map((i, index) => (\r\n                <Col xs={12} md={6} lg={4} key={index} style={colStyle}>\r\n                  <Image src={i} fluid roundedCircle thumbnail></Image>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </Container>\r\n        </InfiniteScroll>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Gif;\r\n","import React,{Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Row, Col, Image} from \"react-bootstrap\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nclass Img extends Component {\r\n    state = {\r\n        option: {\r\n            url: \"https://api.thecatapi.com/v1/images/search?limit=20\",\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-api-key\": \"11c277f8-7891-4269-aee3-6798cb6b61bd\"\r\n            }\r\n        },\r\n        ObjUrls: {}\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios(this.state.option).then(res => {\r\n            // console.log(res);\r\n            let urlsObj = {};\r\n            res.data.map(arr => (urlsObj[arr.id] = arr.url));\r\n            //將資料存成物件,方便查詢以及過濾重複資料\r\n            const preKeysObj = this.state.ObjUrls;\r\n            const newKeysObj = { ...preKeysObj, ...urlsObj };\r\n            this.setState({\r\n                ...this.state,\r\n                ObjUrls: newKeysObj\r\n            });\r\n        });\r\n    }\r\n\r\n    fetchMoreData = () => {\r\n        axios(this.state.option).then(res => {\r\n            // console.log(res);\r\n            let urlsObj = {};\r\n            res.data.map(arr => (urlsObj[arr.id] = arr.url));\r\n            const preKeysObj = this.state.ObjUrls;\r\n            const newKeysObj = { ...preKeysObj, ...urlsObj };\r\n            this.setState({\r\n                ...this.state,\r\n                ObjUrls: newKeysObj\r\n            });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const colStyle = { textAlign: \"center\" };\r\n        return (\r\n\r\n            <InfiniteScroll\r\n                dataLength={Object.values(this.state.ObjUrls).length}\r\n                next={this.fetchMoreData}\r\n                hasMore={true}\r\n                loader={<h4>Loading...</h4>}\r\n            >\r\n                <Container>\r\n                    <Row>\r\n                        {Object.values(this.state.ObjUrls).map((i, index) => (\r\n                            <Col xs={12} md={6} lg={4} key={index} style={colStyle}>\r\n                                <Image src={i} fluid roundedCircle thumbnail></Image>\r\n                            </Col>\r\n                        ))}\r\n                    </Row>\r\n                </Container>\r\n            </InfiniteScroll>\r\n\r\n        ); ;\r\n    }\r\n}\r\n\r\nexport default Img","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport Gif from \"./Gif/gif\";\nimport Img from './Img/img'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <h1>Welcome</h1>\n        <Link to=\"/gif\">Gif</Link>\n        <Link to=\"/img\">Img</Link>\n        <Route path=\"/gif\" exact component={Gif} />\n        <Route path=\"/img\" exact component={Img} />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}