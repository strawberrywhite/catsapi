{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","option","url","method","headers","urls","getNewPics","axios","then","res","console","log","data","map","arr","setState","handleGifs","src","fetchMoreData","preData","concat","this","dataLength","length","next","hasMore","loader","i","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oTA+EeA,E,2MAxEbC,MAAQ,CACNC,OAAQ,CACNC,IAAK,qEACLC,OAAQ,MACRC,QAAS,CACP,YAAa,yCAGjBC,KAAM,I,EAcRC,WAAa,WACXC,IAAM,EAAKP,MAAMC,QAAQO,MAAK,SAAAC,GAC5BC,QAAQC,IAAIF,EAAIG,MAChB,IAAMP,EAAOI,EAAIG,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIZ,OACrC,EAAKa,SAAL,eACK,EAAKf,MADV,CAEEK,KAAMA,S,EAKZW,WAAa,WACX,OAAO,EAAKhB,MAAMK,KAAKQ,KAAI,SAAAC,GACzB,OAAO,yBAAKG,IAAKH,Q,EAIrBI,cAAgB,WACdX,IAAM,EAAKP,MAAMC,QAAQO,MAAK,SAAAC,GAC3B,IAAMJ,EAAOI,EAAIG,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIZ,OAC/BiB,EAAU,EAAKnB,MAAMK,KAE5B,EAAKU,SAAL,eACK,EAAKf,MADV,CAEEK,KAAMc,EAAQC,OAAOf,U,mFAnCN,IAAD,OAClBE,IAAMc,KAAKrB,MAAMC,QAAQO,MAAK,SAAAC,GAC5BC,QAAQC,IAAIF,EAAIG,MAChB,IAAMP,EAAOI,EAAIG,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIZ,OACrC,EAAKa,SAAL,eACK,EAAKf,MADV,CAEEK,KAAMA,U,+BAmCV,OACE,oCAEE,6BACE,kBAAC,IAAD,CACEiB,WAAYD,KAAKrB,MAAMK,KAAKkB,OAC5BC,KAAMH,KAAKH,cACXO,SAAS,EACTC,OAAQ,2CAEPL,KAAKrB,MAAMK,KAAKQ,KAAI,SAACc,EAAGC,GAAJ,OACvB,yBAAKX,IAAKU,EAAGE,IAAKD,c,GAhEVE,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.c810a27c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n// import { Button } from \"react-bootstrap\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nclass App extends Component {\n  state = {\n    option: {\n      url: \"https://api.thecatapi.com/v1/images/search?limit=20&mime_types=gif\",\n      method: \"GET\",\n      headers: {\n        \"x-api-key\": \"11c277f8-7891-4269-aee3-6798cb6b61bd\"\n      }\n    },\n    urls: []\n  };\n\n  componentDidMount() {\n    axios(this.state.option).then(res => {\n      console.log(res.data);\n      const urls = res.data.map(arr => arr.url);\n      this.setState({\n        ...this.state,\n        urls: urls\n      });\n    });\n  }\n\n  getNewPics = () => {\n    axios(this.state.option).then(res => {\n      console.log(res.data);\n      const urls = res.data.map(arr => arr.url);\n      this.setState({\n        ...this.state,\n        urls: urls\n      });\n    });\n  };\n\n  handleGifs = () => {\n    return this.state.urls.map(arr => {\n      return <img src={arr}></img>;\n    });\n  };\n\n  fetchMoreData = () => {\n    axios(this.state.option).then(res => {\n       const urls = res.data.map(arr => arr.url);\n       const preData = this.state.urls;\n\n      this.setState({\n        ...this.state,\n        urls: preData.concat(urls)\n      });\n    });\n  };\n\n  render() {\n    return (\n      <>\n        {/* {this.handleGifs()} */}\n        <div>\n          <InfiniteScroll\n            dataLength={this.state.urls.length}\n            next={this.fetchMoreData}\n            hasMore={true}\n            loader={<h4>Loading...</h4>}\n          >\n            {this.state.urls.map((i, index) => (\n          <img src={i} key={index} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}