{"version":3,"sources":["Gif/gif.js","Img/img.js","App.js","serviceWorker.js","index.js"],"names":["Gif","props","colStyle","textAlign","dataLength","Object","values","objGifUrls","length","next","fetchMoreGifData","hasMore","loader","Container","Row","map","i","index","Col","xs","md","lg","key","style","Image","src","fluid","roundedCircle","thumbnail","Img","objImgUrls","fetchMoreImgData","App","state","optionGif","url","method","headers","optionImg","axios","then","res","urlsObj","data","arr","id","preKeysObj","newKeysObj","setState","console","log","this","to","path","exact","render","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0232ecda.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Row, Col, Image } from \"react-bootstrap\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst Gif = props => {\r\n  const colStyle = { textAlign: \"center\" };\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={Object.values(props.objGifUrls).length}\r\n      next={props.fetchMoreGifData}\r\n      hasMore={true}\r\n      loader={<h4>Loading...</h4>}\r\n    >\r\n      <Container>\r\n        <Row>\r\n          {Object.values(props.objGifUrls).map((i, index) => (\r\n            <Col xs={12} md={6} lg={4} key={index} style={colStyle}>\r\n              <Image src={i} fluid roundedCircle thumbnail></Image>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n    </InfiniteScroll>\r\n  );\r\n};\r\n\r\nexport default Gif;\r\n","import React from \"react\";\r\nimport { Container, Row, Col, Image } from \"react-bootstrap\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst Img = props => {\r\n  const colStyle = { textAlign: \"center\" };\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={Object.values(props.objImgUrls).length}\r\n      next={props.fetchMoreImgData}\r\n      hasMore={true}\r\n      loader={<h4>Loading...</h4>}\r\n    >\r\n      <Container>\r\n        <Row>\r\n          {Object.values(props.objImgUrls).map((i, index) => (\r\n            <Col xs={12} md={6} lg={4} key={index} style={colStyle}>\r\n              <Image src={i} fluid roundedCircle thumbnail></Image>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n    </InfiniteScroll>\r\n  );\r\n};\r\n\r\nexport default Img;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Gif from \"./Gif/gif\";\nimport Img from \"./Img/img\";\n\nclass App extends Component {\n  state = {\n    optionGif: {\n      url: \"https://api.thecatapi.com/v1/images/search?limit=20&mime_types=gif\",\n      method: \"GET\",\n      headers: {\n        \"x-api-key\": \"11c277f8-7891-4269-aee3-6798cb6b61bd\"\n      }\n    },\n    objGifUrls: {},\n    optionImg: {\n      url: \"https://api.thecatapi.com/v1/images/search?limit=20\",\n      method: \"GET\",\n      headers: {\n        \"x-api-key\": \"11c277f8-7891-4269-aee3-6798cb6b61bd\"\n      }\n    },\n    objImgUrls: {}\n  };\n\n  componentDidMount() {\n    //獲取Gif圖檔\n    axios(this.state.optionGif).then(res => {\n      // console.log(res);\n      let urlsObj = {};\n      //將資料存成物件,方便查詢以及過濾重複資料\n      res.data.map(arr => (urlsObj[arr.id] = arr.url));\n      const preKeysObj = this.state.objGifUrls;\n      const newKeysObj = { ...preKeysObj, ...urlsObj };\n      this.setState({\n        ...this.state,\n        objGifUrls: newKeysObj\n      });\n    });\n    //獲取Img圖檔\n    axios(this.state.optionImg).then(res => {\n      let urlsObj = {};\n      res.data.map(arr => (urlsObj[arr.id] = arr.url));\n      const preKeysObj = this.state.objImgUrls;\n      const newKeysObj = { ...preKeysObj, ...urlsObj };\n      this.setState({\n        ...this.state,\n        objImgUrls: newKeysObj\n      });\n    });\n  }\n\n  fetchMoreGifData = () => {\n    axios(this.state.optionGif).then(res => {\n      let urlsObj = {};\n      res.data.map(arr => (urlsObj[arr.id] = arr.url));\n      const preKeysObj = this.state.objGifUrls;\n      const newKeysObj = { ...preKeysObj, ...urlsObj };\n      this.setState({\n        ...this.state,\n        objGifUrls: newKeysObj\n      });\n    });\n  };\n\n  fetchMoreImgData = () => {\n    axios(this.state.optionImg).then(res => {\n      let urlsObj = {};\n      res.data.map(arr => (urlsObj[arr.id] = arr.url));\n      const preKeysObj = this.state.objImgUrls;\n      const newKeysObj = { ...preKeysObj, ...urlsObj };\n      this.setState({\n        ...this.state,\n        objImgUrls: newKeysObj\n      });\n    });\n    console.log(\"ok\")\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <h1>Welcome</h1>\n        <Link to=\"/catsapi/gif\">Gif</Link>\n        <Link to=\"/catsapi/img\">Img</Link>\n        <Route\n          path=\"/catsapi/gif\"\n          exact\n          render={() => (\n            <Gif\n              objGifUrls={this.state.objGifUrls}\n              fetchMoreGifData={this.fetchMoreGifData}\n            />\n          )}\n        />\n        <Route\n          path=\"/catsapi/img\"\n          exact\n          render={() => (\n            <Img\n              objImgUrls={this.state.objImgUrls}\n              fetchMoreImgData={this.fetchMoreImgData}\n            />\n          )}\n        />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}